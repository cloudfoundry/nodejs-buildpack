var url = require('url');


function filterSensitiveDataFromObject(objIns) {
  if (objIns && Object.prototype.toString.call(objIns) == "[object Object]") {
    Object.keys(objIns).forEach(function (key) {
      objIns[key] = filterSensitiveDataFromObject(objIns[key]);
    });
    return objIns;
  }
  return "?";
}

function deepCopy(origObject) {
  let cpObj, value, key;
  if (typeof origObject !== "object" || origObject === null) {
    return origObject;
  }
  cpObj = Array.isArray(origObject) ? [] : {};
  for (key in origObject) {
    value = origObject[key];
    cpObj[key] = deepCopy(value);
  }
  return cpObj;
}

function createBtNamingWrapper(req) {
  // TODO: replace these with boost::regex in libagent bindings
  if (req.url) {
    var parsedUrl = url.parse(req.url);
    req.parsedPathName = parsedUrl.pathname;
    req.parsedParameterString = parsedUrl.query;
  }
  return req;
}

const constants = {
  GRAPHQL_QUERY_TYPE: "gql"
};

module.exports.createBtNamingWrapper = createBtNamingWrapper;
module.exports.filterSensitiveDataFromObject = filterSensitiveDataFromObject;
module.exports.deepCopy = deepCopy;
module.exports.constants = constants;