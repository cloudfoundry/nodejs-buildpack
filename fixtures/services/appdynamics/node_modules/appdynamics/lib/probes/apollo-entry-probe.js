/*
This is for apollo-server entry probe 
*/

let HttpCommon = require("./http-common");

exports.ApolloEntryProbe = ApolloEntryProbe;

function ApolloEntryProbe(agent) {
  this.agent = agent;
}

ApolloEntryProbe.prototype.init = function () {};

ApolloEntryProbe.prototype.attach = function (obj) {
  let self = this;
  self.agent.proxy.before(
    obj.ApolloServer.prototype,
    "createServerInfo",
    (args) => this.addLifeCycleHooks(args)
  );
};

ApolloEntryProbe.prototype.addLifeCycleHooks = function (obj) {
  let self = this;
  let userDefinedContext = obj.context;
  obj.context = function ({ req, res }) {
    let userCtx;
    if (userDefinedContext instanceof Function) {
      userCtx = userDefinedContext.call(this, ...arguments);
    } else if (userDefinedContext instanceof Object) {
      userDefinedContext.gqlReq = req;
      userDefinedContext.gqlRes = res;
      return userDefinedContext;
    }
    return Object.assign({ gqlReq: req, gqlRes: res }, userCtx);
  };

  obj.plugins = [
    {
      requestDidStart() {
        return {
          didResolveOperation(response) {
            response.context.gqlReq.graphqlop = response.operationName;
            response.context.gqlReq.transactionStarted = true;
            HttpCommon.startTransactionHandler(
              response.context.gqlReq,
              response.context.gqlRes,
              self.agent
            );
          },

          didEncounterErrors(response) {
            response.context.gqlRes.error = response.errors[0];
            if(response.context.gqlReq.transactionStarted) {
              return;
            }
            HttpCommon.startTransactionHandler(
              response.context.gqlReq,
              response.context.gqlRes,
              self.agent
            );
          },
        };
      },
    },
    ...obj.plugins,
  ];
};
